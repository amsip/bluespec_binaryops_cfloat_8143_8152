/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Fri Nov 17 18:10:12 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkModuleBOCfloat8_1_5_2.h"


/* Constructor */
MOD_mkModuleBOCfloat8_1_5_2::MOD_mkModuleBOCfloat8_1_5_2(tSimStateHdl simHdl,
							 char const *name,
							 Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 0u;
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkModuleBOCfloat8_1_5_2::init_symbols_0()
{
}


/* Rule actions */


/* Methods */

tUInt8 MOD_mkModuleBOCfloat8_1_5_2::METH_bo_divide_m(tUInt8 ARG_bo_divide_m_xx,
						     tUInt8 ARG_bo_divide_m_yy)
{
  tUInt8 DEF_bo_divide_m_xx_BITS_6_TO_2_MINUS_bo_divide_m_y_ETC___d6;
  tUInt8 DEF_bo_divide_m_xx_BIT_7_XOR_bo_divide_m_yy_BIT_7___d3;
  tUInt8 DEF_bo_divide_m_xx_BITS_1_TO_0_QUOT_bo_divide_m_yy_ETC___d9;
  tUInt8 DEF_xx_sign__h35;
  tUInt8 DEF_yy_sign__h42;
  tUInt8 DEF_xx_fraction__h37;
  tUInt8 DEF_yy_fraction__h44;
  tUInt8 DEF_xx_exponent__h36;
  tUInt8 DEF_yy_exponent__h43;
  tUInt8 PORT_bo_divide_m;
  DEF_yy_exponent__h43 = (tUInt8)((tUInt8)31u & (ARG_bo_divide_m_yy >> 2u));
  DEF_xx_exponent__h36 = (tUInt8)((tUInt8)31u & (ARG_bo_divide_m_xx >> 2u));
  DEF_yy_fraction__h44 = (tUInt8)((tUInt8)3u & ARG_bo_divide_m_yy);
  DEF_xx_fraction__h37 = (tUInt8)((tUInt8)3u & ARG_bo_divide_m_xx);
  DEF_yy_sign__h42 = (tUInt8)(ARG_bo_divide_m_yy >> 7u);
  DEF_xx_sign__h35 = (tUInt8)(ARG_bo_divide_m_xx >> 7u);
  DEF_bo_divide_m_xx_BITS_1_TO_0_QUOT_bo_divide_m_yy_ETC___d9 = (tUInt8)3u & (DEF_xx_fraction__h37 / DEF_yy_fraction__h44);
  DEF_bo_divide_m_xx_BIT_7_XOR_bo_divide_m_yy_BIT_7___d3 = DEF_xx_sign__h35 ^ DEF_yy_sign__h42;
  DEF_bo_divide_m_xx_BITS_6_TO_2_MINUS_bo_divide_m_y_ETC___d6 = (tUInt8)31u & (DEF_xx_exponent__h36 - DEF_yy_exponent__h43);
  PORT_bo_divide_m = (tUInt8)255u & (((DEF_bo_divide_m_xx_BIT_7_XOR_bo_divide_m_yy_BIT_7___d3 << 7u) | (DEF_bo_divide_m_xx_BITS_6_TO_2_MINUS_bo_divide_m_y_ETC___d6 << 2u)) | DEF_bo_divide_m_xx_BITS_1_TO_0_QUOT_bo_divide_m_yy_ETC___d9);
  return PORT_bo_divide_m;
}

tUInt8 MOD_mkModuleBOCfloat8_1_5_2::METH_RDY_bo_divide_m()
{
  tUInt8 DEF_CAN_FIRE_bo_divide_m;
  tUInt8 PORT_RDY_bo_divide_m;
  DEF_CAN_FIRE_bo_divide_m = (tUInt8)1u;
  PORT_RDY_bo_divide_m = DEF_CAN_FIRE_bo_divide_m;
  return PORT_RDY_bo_divide_m;
}

tUInt8 MOD_mkModuleBOCfloat8_1_5_2::METH_bo_multiply_m(tUInt8 ARG_bo_multiply_m_xx,
						       tUInt8 ARG_bo_multiply_m_yy)
{
  tUInt8 DEF_bo_multiply_m_xx_BITS_6_TO_2_3_PLUS_bo_multipl_ETC___d15;
  tUInt8 DEF_bo_multiply_m_xx_BIT_7_0_XOR_bo_multiply_m_yy__ETC___d12;
  tUInt8 DEF_xx_sign__h71;
  tUInt8 DEF_yy_sign__h78;
  tUInt8 DEF_xx_fraction__h73;
  tUInt8 DEF_yy_fraction__h80;
  tUInt8 DEF_bo_multiply_m_xx_BITS_1_TO_0_6_MUL_bo_multiply_ETC___d19;
  tUInt8 DEF_xx_exponent__h72;
  tUInt8 DEF_yy_exponent__h79;
  tUInt8 PORT_bo_multiply_m;
  DEF_yy_exponent__h79 = (tUInt8)((tUInt8)31u & (ARG_bo_multiply_m_yy >> 2u));
  DEF_xx_exponent__h72 = (tUInt8)((tUInt8)31u & (ARG_bo_multiply_m_xx >> 2u));
  DEF_yy_fraction__h80 = (tUInt8)((tUInt8)3u & ARG_bo_multiply_m_yy);
  DEF_xx_fraction__h73 = (tUInt8)((tUInt8)3u & ARG_bo_multiply_m_xx);
  DEF_bo_multiply_m_xx_BITS_1_TO_0_6_MUL_bo_multiply_ETC___d19 = (tUInt8)((tUInt8)3u & ((tUInt8)15u & (DEF_xx_fraction__h73 * DEF_yy_fraction__h80)));
  DEF_yy_sign__h78 = (tUInt8)(ARG_bo_multiply_m_yy >> 7u);
  DEF_xx_sign__h71 = (tUInt8)(ARG_bo_multiply_m_xx >> 7u);
  DEF_bo_multiply_m_xx_BIT_7_0_XOR_bo_multiply_m_yy__ETC___d12 = DEF_xx_sign__h71 ^ DEF_yy_sign__h78;
  DEF_bo_multiply_m_xx_BITS_6_TO_2_3_PLUS_bo_multipl_ETC___d15 = (tUInt8)31u & (DEF_xx_exponent__h72 + DEF_yy_exponent__h79);
  PORT_bo_multiply_m = (tUInt8)255u & (((DEF_bo_multiply_m_xx_BIT_7_0_XOR_bo_multiply_m_yy__ETC___d12 << 7u) | (DEF_bo_multiply_m_xx_BITS_6_TO_2_3_PLUS_bo_multipl_ETC___d15 << 2u)) | DEF_bo_multiply_m_xx_BITS_1_TO_0_6_MUL_bo_multiply_ETC___d19);
  return PORT_bo_multiply_m;
}

tUInt8 MOD_mkModuleBOCfloat8_1_5_2::METH_RDY_bo_multiply_m()
{
  tUInt8 DEF_CAN_FIRE_bo_multiply_m;
  tUInt8 PORT_RDY_bo_multiply_m;
  DEF_CAN_FIRE_bo_multiply_m = (tUInt8)1u;
  PORT_RDY_bo_multiply_m = DEF_CAN_FIRE_bo_multiply_m;
  return PORT_RDY_bo_multiply_m;
}


/* Reset routines */

void MOD_mkModuleBOCfloat8_1_5_2::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkModuleBOCfloat8_1_5_2::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkModuleBOCfloat8_1_5_2::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkModuleBOCfloat8_1_5_2::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkModuleBOCfloat8_1_5_2::dump_VCD(tVCDDumpType dt,
					   unsigned int levels,
					   MOD_mkModuleBOCfloat8_1_5_2 &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkModuleBOCfloat8_1_5_2::vcd_defs(tVCDDumpType dt, MOD_mkModuleBOCfloat8_1_5_2 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}
