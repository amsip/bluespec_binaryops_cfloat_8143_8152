/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sun Dec 10 05:29:29 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTb.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTb::MODEL_mkTb()
{
  mkTb_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTb()
{
  MODEL_mkTb *model = new MODEL_mkTb();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTb &INST_top = *((MOD_mkTb *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_finishdis1;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_finishdis1;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_theUltimateAnswer;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_theUltimateAnswer;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_theUltimateAnswer2;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_theUltimateAnswer2;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2a;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2a;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3a;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3a;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3b;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3b;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3c;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3c;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2aa;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2aa;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3aa;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3aa;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2ab;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2ab;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3ab;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3ab;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3bc;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3bc;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3cd;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3cd;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_finishdis2;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_finishdis2;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2 = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2a = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2a = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2a;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2aa = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2aa = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2aa;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2ab = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2ab = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule2ab;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3 = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3a = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3a = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3a;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3aa = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3aa = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3aa;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3ab = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3ab = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3ab;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3b = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3b = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3b;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3bc = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3bc = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3bc;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3c = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3c = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3c;
	 DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3cd = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3cd = DEF_INST_top_DEF_CAN_FIRE_RL_displayrule3cd;
	 DEF_INST_top_DEF_CAN_FIRE_RL_finishdis1 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_finishdis1 = DEF_INST_top_DEF_CAN_FIRE_RL_finishdis1;
	 DEF_INST_top_DEF_CAN_FIRE_RL_finishdis2 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_finishdis2 = DEF_INST_top_DEF_CAN_FIRE_RL_finishdis2;
	 DEF_INST_top_DEF_CAN_FIRE_RL_theUltimateAnswer = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_theUltimateAnswer = DEF_INST_top_DEF_CAN_FIRE_RL_theUltimateAnswer;
	 DEF_INST_top_DEF_CAN_FIRE_RL_theUltimateAnswer2 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_theUltimateAnswer2 = DEF_INST_top_DEF_CAN_FIRE_RL_theUltimateAnswer2;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_finishdis1)
	   INST_top.RL_finishdis1();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_theUltimateAnswer)
	   INST_top.RL_theUltimateAnswer();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_theUltimateAnswer2)
	   INST_top.RL_theUltimateAnswer2();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2)
	   INST_top.RL_displayrule2();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3)
	   INST_top.RL_displayrule3();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2a)
	   INST_top.RL_displayrule2a();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3a)
	   INST_top.RL_displayrule3a();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3b)
	   INST_top.RL_displayrule3b();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3c)
	   INST_top.RL_displayrule3c();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2aa)
	   INST_top.RL_displayrule2aa();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3aa)
	   INST_top.RL_displayrule3aa();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule2ab)
	   INST_top.RL_displayrule2ab();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3ab)
	   INST_top.RL_displayrule3ab();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3bc)
	   INST_top.RL_displayrule3bc();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_displayrule3cd)
	   INST_top.RL_displayrule3cd();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_finishdis2)
	   INST_top.RL_finishdis2();
	 if (do_reset_ticks(simHdl))
	 {
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTb::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTb_instance = new MOD_mkTb(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTb_instance->INST_ifc.set_clk_0)("CLK");
  (mkTb_instance->INST_ifc2.set_clk_0)("CLK");
  (mkTb_instance->set_clk_0)("CLK");
}
void MODEL_mkTb::destroy_model()
{
  delete mkTb_instance;
  mkTb_instance = NULL;
}
void MODEL_mkTb::reset_model(bool asserted)
{
  (mkTb_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTb::get_instance()
{
  return mkTb_instance;
}

/* Fill in version numbers */
void MODEL_mkTb::get_version(char const **name, char const **build)
{
  *name = "2021.12.1";
  *build = "fd501401";
}

/* Get the model creation time */
time_t MODEL_mkTb::get_creation_time()
{
  
  /* Sat Dec  9 23:59:29 UTC 2023 */
  return 1702166369llu;
}

/* State dumping function */
void MODEL_mkTb::dump_state()
{
  (mkTb_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTb & mkTb_backing(tSimStateHdl simHdl)
{
  static MOD_mkTb *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTb(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTb::dump_VCD_defs()
{
  (mkTb_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTb::dump_VCD(tVCDDumpType dt)
{
  (mkTb_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTb_backing(sim_hdl));
}
